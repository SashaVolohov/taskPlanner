// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source=repository.go -destination=./repository_mock.go -package=repository
//

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	taskPlanner "github.com/SashaVolohov/taskPlanner"
	gomock "go.uber.org/mock/gomock"
)

// MockTask is a mock of Task interface.
type MockTask struct {
	ctrl     *gomock.Controller
	recorder *MockTaskMockRecorder
	isgomock struct{}
}

// MockTaskMockRecorder is the mock recorder for MockTask.
type MockTaskMockRecorder struct {
	mock *MockTask
}

// NewMockTask creates a new mock instance.
func NewMockTask(ctrl *gomock.Controller) *MockTask {
	mock := &MockTask{ctrl: ctrl}
	mock.recorder = &MockTaskMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTask) EXPECT() *MockTaskMockRecorder {
	return m.recorder
}

// GetTasks mocks base method.
func (m *MockTask) GetTasks() []taskPlanner.TaskInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasks")
	ret0, _ := ret[0].([]taskPlanner.TaskInterface)
	return ret0
}

// GetTasks indicates an expected call of GetTasks.
func (mr *MockTaskMockRecorder) GetTasks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasks", reflect.TypeOf((*MockTask)(nil).GetTasks))
}

// GetTasksCount mocks base method.
func (m *MockTask) GetTasksCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTasksCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetTasksCount indicates an expected call of GetTasksCount.
func (mr *MockTaskMockRecorder) GetTasksCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTasksCount", reflect.TypeOf((*MockTask)(nil).GetTasksCount))
}

// LoadFromFile mocks base method.
func (m *MockTask) LoadFromFile(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadFromFile", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadFromFile indicates an expected call of LoadFromFile.
func (mr *MockTaskMockRecorder) LoadFromFile(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadFromFile", reflect.TypeOf((*MockTask)(nil).LoadFromFile), path)
}
